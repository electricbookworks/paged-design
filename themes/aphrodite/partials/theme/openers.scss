.component-body {

    // Requires that margin-top and line-height-default
    // are defined with the same units, e.g. px.
    $opener-image-height: $margin-top + ($line-height-default * 8);
    $opener-image-bleed: 3mm;

    // The heading below the image
    header {
        // @include extend-to-right-sidebar();

        &::before {
            @include wavy-horizontal-box-upwards(white);
            content: "";
            position: absolute;
            left: -($margin-inside + $opener-image-bleed);
            top: $opener-image-height / 2;
            right: -($margin-outside + $opener-image-bleed);
            height: 15mm;
            z-index: 1;
        }

        &:first-of-type {
            margin-top: calc(#{$opener-image-height} - #{$line-height-default} * 1);
        }

        & + .cst {
            // @include extend-to-right-sidebar();
        }

        & ~ p.author {
            // @include extend-to-right-sidebar();
            @include small-caps();
            font-family: $font-text-secondary;
            font-size: $font-size-default-small;
            margin-bottom: $line-height-default * 1.5;
        }
    }

    // Depends on this image being early enough
    // in the chapter that it's on the first page.
    // And these only display big on .component-body.
    .content-opener-image {
    
        figure {
            display: contents;
            margin: 0;
            
            img {
                position: absolute;

                // We set the bleed directly here rather than using $bleed
                // because we want the image to appear the same in
                // screen PDF (where bleed is 0) and print PDF (with bleed).
                // We use calc where variables might be defined with
                // different units, e.g. mm or pt.
                top: -($margin-top + $opener-image-bleed);
                left: -($margin-inside + $opener-image-bleed);
                right: calc((#{$margin-outside} + #{$sidebar-width} + $opener-image-bleed) * -1);
                height: $opener-image-height + $opener-image-bleed;
                margin: 0;
                max-width: none;
                object-fit: cover;
                width: $page-width + ($opener-image-bleed * 2);
            }

            figcaption {

                // Position
                position: absolute;
                bottom: 0;
                right: -($sidebar-width + $sidebar-gap);
                width: $sidebar-width - $sidebar-gap;

                // Appearance
                border-top: $rule-thickness solid $theme-color-accent;
                font-family: $font-text-secondary;
                font-size: $font-size-default-small;
                padding-top: $line-height-default / 2;
            }
        }
    }

    // Also see part-page.scss
    &.part {

        .content-opener-image {

            figure {
                
                img {
                    min-height: $page-height + ($opener-image-bleed * 2);
                    min-width: $page-height + ($opener-image-bleed * 2);
                    position: absolute;
                    top: -($margin-top + $opener-image-bleed);
                    bottom: -($margin-bottom + $opener-image-bleed);
                    left: -($margin-inside + $opener-image-bleed);
                    right: -($margin-outside + $opener-image-bleed);
                    z-index: -1;
                }
            }
        }

        &::before {
            @include wavy-vertical-box;
            content: "";
            position: absolute;
            left: -($margin-inside + $opener-image-bleed);
            top: -($margin-top + $opener-image-bleed);
            bottom: -($margin-bottom + $opener-image-bleed);
            width: 50mm;
            z-index: 1;
        }

        header {
            
            &::before {
                content: normal;
            }
            
            h1:first-of-type {

                // Typography
                color: white;
                font-size: 30pt;
                width: $page-height;

                // Position
                transform-origin: left;
                transform: rotate(270deg);
                position: absolute;
                left: 0;
                bottom: 0;
                z-index: 2;

                strong:first-of-type {
                    color: $color-text-main;
                    display: inline-block;
                    font-size: 42px;
                    font-weight: 500;
                    line-height: 1;
                }
            }
        }

        p {
            background-color: $theme-color-accent-light;
            padding-top: ($line-height-default * 0.5);
            padding-bottom: ($line-height-default * 0.5);
            padding-right: $margin-outside;
            padding-left: 30mm;
            position: absolute;
            bottom: 0;
            right: -($margin-outside);
            width: $page-width - 20mm;
            z-index: 0;

            &:nth-of-type(2) {
                break-before: page;
            }
        }
    }
}


// Chapter numbers

// The spec design used the word 'chapter'
// before the number, but Ketida only inserts
// a number. We don't want to add generated content
// in CSS, because the book might not be in English.
// So instead, we'll add a design where the chapter number
// sits to the left of the header text.

$chapter-number-has-text: false;

.chapter-number {
    color: $theme-color-grey;
    font-family: $font-display-main;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;

    @if $chapter-number-has-text == true {
        font-size: 21px;
    } @else {
        float: left;

        // Size and line-height matches h1
        font-size: 64px;
        line-height: $line-height-default * 3;
        margin-right: $text-indent;
    }

    & + h1 {
        margin-top: 0;
    }
}

// Component/chapter subtitles

.cst {
    @include subtitle();
}


// Opening boxes

.learning-objectives {
    @include boxes-common();

    // Assumes there will be an element with margin-top
    // after this, like a heading. This way, the box
    // can merge visually with, say, .outline.
    margin-bottom: 0;

    & > p {
        @include small-caps();
        font-size: $font-size-default-small;
        margin-bottom: 0;
    }

    ul, ol {
        margin: 0 0 0 $line-height-default; // not sure why LHD
        padding: 0;
    }

    & + .outline {

        // Need to override specificity here,
        // because of how paged.js rewrites CSS here.
        margin: 0 0 $line-height-default 0!important;
    }
}

.outline {
    @include boxes-common();

    // Assumes there will be an element with margin-top
    // after this, like a heading. This way, the box
    // can merge visually with, say, .learning-objectives.
    margin-bottom: 0;

    & > p {
        @include small-caps();
        font-size: $font-size-default-small;
        margin-bottom: 0;
    }

    ul, ol {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    & + .learning-objectives {
        // Need to override specificity here,
        // because of how paged.js rewrites CSS here.
        margin: 0 0 $line-height-default 0!important;
    }

}