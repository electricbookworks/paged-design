// Requires that margin-top and line-height-default
// are defined with the same units, e.g. px.
$opener-image-height: $margin-top + ($line-height-default * 15);
$opener-image-bleed: 3mm;

.component-body {

    // The heading below the image
    header {
        position: relative;
        z-index: 1;

        &:first-of-type {
            margin-top: calc(#{$opener-image-height} - #{$margin-top} + $line-height-default * 2);
        }

        h1 {
            
            // Override heading()
            &::before {
                content: normal;
            }
        }

        & ~ p.author {
            font-style: italic;
            line-height: $line-height-default;
            margin-bottom: $line-height-default * 1.5;
            margin-top: $line-height-default * 0.5;
            max-width: 80%;
            text-indent: 0;

            em {
                font-style: normal;
            }
        }
    }

    // Depends on this image being early enough
    // in the chapter that it's on the first page.
    // And these only display big on .component-body.
    .content-opener-image {

        figure {
            display: contents;
            margin: 0;

            img {
                position: absolute;

                // We set the bleed directly here rather than using $bleed
                // because we want the image to appear the same in
                // screen PDF (where bleed is 0) and print PDF (with bleed).
                // We use calc where variables might be defined with
                // different units, e.g. mm or pt.
                top: -($margin-top + $opener-image-bleed);
                left: -($margin-inside);
                width: $page-width + $opener-image-bleed;
                height: $opener-image-height + $opener-image-bleed;
                margin: 0;
                max-width: none;
                object-fit: cover;
            }

            figcaption {

                // Position
                position: absolute;
                bottom: 0;
                right: -($sidebar-width - $sidebar-gap);
                width: $sidebar-width - ($sidebar-gap * 2);
                padding-right: $sidebar-gap;

                // Appearance
                font-family: $font-text-secondary;
                font-size: $font-size-default-small;
            }
        }
    }

    // Also see part-page.scss
    &.part {

        .content-opener-image {

            figure {

                img {
                    background-color: white;
                    bottom: -($margin-bottom + $opener-image-bleed);
                    min-height: $page-height + ($opener-image-bleed * 2);
                    z-index: -1;
                }
            }
        }

        header {

            &:first-of-type {
                width: 94mm;
                height: $line-height-default * 28;
                display: flex;
                align-items: flex-end;
                background-color: $theme-color-accent;
                margin-top: -($margin-top + $opener-image-bleed);
            }

            h1 {
                color: white;
                font-size: 38px;
                line-height: 1.2;
                margin: 0;
                padding-top: $margin-top + $opener-image-bleed;
                padding-right: $box-padding-horizontal;
                padding-left: $box-padding-horizontal;
                padding-bottom: $box-padding-vertical * 2;

                strong:first-of-type {
                    color: black;
                    font-size: 56px;
                    font-weight: normal;
                    line-height: inherit;
                    margin-bottom: $line-height-default * 0.5;
                }
            }
        }

        p {
            color: white;
            background-color: $theme-color-accent;
            padding-top: $box-padding-vertical;
            padding-right: $box-padding-horizontal;
            padding-left: $box-padding-horizontal;
            padding-bottom: $margin-bottom + $opener-image-bleed;
            position: absolute;
            bottom: -($margin-bottom + $opener-image-bleed);
            width: 94mm;
            z-index: 1;

            &:nth-of-type(2) {
                break-before: page;
            }
        }
    }
}


// Chapter numbers

// The spec design used the word 'chapter'
// before the number, but Ketida only inserts
// a number. We don't want to add generated content
// in CSS, because the book might not be in English.
// So instead, we'll add a design where the chapter number
// sits to the left of the header text.

.chapter-number {

    // Appearance
    @include heading-1();
    background-color: $theme-color-accent;
    color: white;
    font-weight: bold;

    // Override heading()
    &::before {
        content: normal;
    }

    // Position
    display: inline-flex;
    align-items: flex-end;
    justify-content: center;
    height: $opener-image-height + ($line-height-default * 4);
    margin-top: -($margin-top + $opener-image-bleed);
    margin-right: $text-indent;
    padding: $box-padding;
    z-index: 1;

    & + .component-title {
        margin-top: 0;
    }
}


// Component/chapter subtitles

.cst {
    @include subtitle();
}


// Opening boxes

.learning-objectives {
    @include boxes-common();

    // Assumes there will be an element with margin-top
    // after this, like a heading. This way, the box
    // can merge visually with, say, .outline.
    margin-bottom: 0;

    & > p {
        @include small-caps();
        color: $theme-color-accent;
        font-size: $font-size-default-small;
        font-weight: 600;
        margin-bottom: 0;
    }

    ul, ol {
        margin: 0 0 0 $line-height-default; // not sure why LHD
        padding: 0;
    }

    & + .outline {

        // Need to override specificity here,
        // because of how paged.js rewrites CSS here.
        margin: 0 0 $line-height-default 0!important;
    }
}

.outline {
    @include boxes-common();

    // Assumes there will be an element with margin-top
    // after this, like a heading. This way, the box
    // can merge visually with, say, .learning-objectives.
    margin-bottom: 0;

    & > p {
        @include small-caps();
        color: $theme-color-accent;
        font-size: $font-size-default-small;
        font-weight: 600;
        margin-bottom: 0;
    }

    ul, ol {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    & + .learning-objectives {
        // Need to override specificity here,
        // because of how paged.js rewrites CSS here.
        margin: 0 0 $line-height-default 0!important;
    }
}
